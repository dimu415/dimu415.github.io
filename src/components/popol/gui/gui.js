export const guis=[
    {
        name:'제조 결함 탐지 프로그램',
        url:"https://github.com/dimu415/PCB-Project",
        appicon:'/AI/appicon.png',
        unnamed:'/AI/unnamed.png',
        graph:['/AI/graph.png','/AI/graph1.png','/AI/graph2.png','/AI/graph3.png','/AI/graph4.png'],
        tag:['Python','GUI','AI','Yolov8','4인 개발','Object Detection'],
        ex:[{title:'PyQt 기반 GUI 프로그램',contant:'직관적인 그래픽 사용자 인터페이스 구현, 결함 라벨링 정보 시각화를 통해 사용자가 쉽게 프로그램을 조작하고 결과를 확인할 수 있습니다. '},
            
            {title:'데이터 관리 및 증강',contant:'학습 데이터를 원하는 비율로 분리하고, 다양한 데이터 증강 기법을 사용하여 모델의 성능과 일반화 성능을 최적화합니다.'},
            {title:'모델 학습 및 성능 평가',contant:'YOLOv8 모델을 사용하여 제조품 결함을 학습하고 실시간으로 탐지할 수 있으며, 주요 성능 지표를 사용하여 모델의 정확도를 평가합니다.'},
        ],
        contant:`
        제조품의 불량을 학습시켜 불량품을 감지하는 프로그램입니다.
        `,
        main:[
        {
            'chapter':'프로젝트 개요',
            'contant':[`
        이 프로젝트는 제조품의 불량을 감지하기 위해 Python 기반으로 YOLOv8 모델을 사용하여 개발된 결함 탐지 프로그램입니다. 
        프로그램은 PyQt를 사용하여 GUI를 구현했으며, 애자일 방식을 통해 프로젝트를 진행했습니다. 
        코드와 문서 관리는 GitHub와 Notion을 활용하여 효율적으로 관리했습니다.
        `
            ]
        },
        {
            'chapter':'YOLOv8 모델 설명',
            'contant':['YOLO는 객체 탐지 알고리즘 중 하나로, 이미지 내 여러 객체를 실시간으로 감지할 수 있는 모델입니다. YOLOv8은 이전 버전들에 비해 향상된 성능과 정확도를 제공하며, 더 빠르고 가볍게 설계되었습니다.',
                '단일 신경망을 사용하여 이미지를 처리하며, 객체의 경계 상자와 클래스 확률을 동시에 예측합니다. 이는 다른 객체 탐지 모델에 비해 더 빠르고 효율적입니다.'
            ]
        },
        {
            'chapter':'PyQt 기반 GUI 프로그램',
            'contant':['사용자 인터페이스: PyQt를 사용하여 직관적인 그래픽 사용자 인터페이스를 구현했습니다. 이를 통해 사용자는 쉽게 프로그램을 조작하고 결과를 확인할 수 있습니다.',
                '라벨링 정보 시각화: 검출된 결함의 라벨링 정보를 육안으로 확인할 수 있도록 인터페이스에 표시합니다.'
            ]
        },
        {
            'chapter':'데이터 관리 및 증강',
            'contant':['데이터 분리: 학습, 검증, 테스트 데이터를 원하는 비율로 분리할 수 있습니다. 이를 통해 모델의 성능을 최적화할 수 있습니다.',
                '데이터 증강: 부족한 데이터를 보완하기 위해 다양한 데이터 증강 기법을 사용했습니다. 이는 모델의 일반화 성능을 향상시키는 데 중요한 역할을 합니다.'
            ]
        },
        {
            'chapter':'모델 학습 및 성능 평가',
            'contant':['모델 학습: YOLOv8 모델을 사용하여 제조품의 불량을 학습시킵니다. 학습된 모델은 실시간으로 결함을 탐지할 수 있습니다.',
                '성능 평가: 학습 결과를 시각적으로 확인할 수 있으며, F1-score 등 주요 성능 지표를 통해 모델의 정확도를 평가할 수 있습니다.'
            ]
        },
        {
            'chapter':'프로젝트 관리',
            'contant':['애자일 방식: 스프린트 단위로 작업을 분할하고 주기적으로 리뷰 및 피드백을 통해 프로젝트를 진행했습니다. 이를 통해 빠르게 변화하는 요구사항에 유연하게 대응할 수 있었습니다.',
                '코드 및 문서 관리: GitHub를 사용하여 코드 버전 관리를 수행하고, Notion을 통해 문서화를 진행했습니다. 이를 통해 프로젝트의 체계적인 관리를 가능하게 했습니다.'
            ]
        }
    ],
    skills:{'언어':'Python','모델': 'YOLOv8','GUI': 'PyQt','프로젝트 관리': '애자일 방식, GitHub, Notion'},
    result:`
    
프로젝트명: 제조 결함 탐지 프로그램

프로젝트 개요:
이 프로젝트는 제조품의 불량을 감지하기 위해 Python 기반으로 YOLOv8 모델을 사용하여 개발된 결함 탐지 프로그램입니다. 프로그램은 PyQt를 사용하여 GUI를 구현했으며, 애자일 방식을 통해 프로젝트를 진행했습니다. 코드와 문서 관리는 GitHub와 Notion을 활용하여 효율적으로 관리했습니다.

주요 기능:

YOLOv8 모델 설명:

YOLO (You Only Look Once): YOLO는 객체 탐지 알고리즘 중 하나로, 이미지 내 여러 객체를 실시간으로 감지할 수 있는 모델입니다. YOLOv8은 이전 버전들에 비해 향상된 성능과 정확도를 제공하며, 더 빠르고 가볍게 설계되었습니다.
주요 특징: 단일 신경망을 사용하여 이미지를 처리하며, 객체의 경계 상자와 클래스 확률을 동시에 예측합니다. 이는 다른 객체 탐지 모델에 비해 더 빠르고 효율적입니다.
PyQt 기반 GUI 프로그램:

사용자 인터페이스: PyQt를 사용하여 직관적인 그래픽 사용자 인터페이스를 구현했습니다. 이를 통해 사용자는 쉽게 프로그램을 조작하고 결과를 확인할 수 있습니다.
라벨링 정보 시각화: 검출된 결함의 라벨링 정보를 육안으로 확인할 수 있도록 인터페이스에 표시합니다.
데이터 관리 및 증강:

데이터 분리: 학습, 검증, 테스트 데이터를 원하는 비율로 분리할 수 있습니다. 이를 통해 모델의 성능을 최적화할 수 있습니다.
데이터 증강: 부족한 데이터를 보완하기 위해 다양한 데이터 증강 기법을 사용했습니다. 이는 모델의 일반화 성능을 향상시키는 데 중요한 역할을 합니다.
모델 학습 및 성능 평가:

모델 학습: YOLOv8 모델을 사용하여 제조품의 불량을 학습시킵니다. 학습된 모델은 실시간으로 결함을 탐지할 수 있습니다.
성능 평가: 학습 결과를 시각적으로 확인할 수 있으며, F1-score 등 주요 성능 지표를 통해 모델의 정확도를 평가할 수 있습니다.
프로젝트 관리:

애자일 방식: 스프린트 단위로 작업을 분할하고 주기적으로 리뷰 및 피드백을 통해 프로젝트를 진행했습니다. 이를 통해 빠르게 변화하는 요구사항에 유연하게 대응할 수 있었습니다.
코드 및 문서 관리: GitHub를 사용하여 코드 버전 관리를 수행하고, Notion을 통해 문서화를 진행했습니다. 이를 통해 프로젝트의 체계적인 관리를 가능하게 했습니다.
기술 스택:

언어: Python
모델: YOLOv8
GUI: PyQt
프로젝트 관리: 애자일 방식, GitHub, Notion
성능 평가: F1-score 등
프로젝트 결과:
이 제조 결함 탐지 프로그램은 제조업체에서 불량품을 효과적으로 감지하고 관리하는 데 큰 도움을 주었습니다. 
YOLOv8 모델을 사용하여 높은 정확도의 결함 감지 기능을 제공하며, 
PyQt 기반의 GUI를 통해 사용자가 쉽게 결함 정보를 확인하고 관리할 수 있습니다.
 애자일 방식을 통해 프로젝트를 유연하고 효율적으로 진행했으며,
  GitHub와 Notion을 통해 체계적으로 코드와 문서를 관리하였습니다. 
  결과적으로, 
이 프로그램은 제조업체의 품질 관리 프로세스를 크게 향상시켰습니다.
    `
    },
    {
        name:'대용량 엑셀 데이터 편집 매크로 프로그램',
        url:"https://github.com/dimu415/Excel_Macro_Python",
        appicon:'/Excel/appicon.png',
        unnamed:'/Excel/unnamed.png',
        graph:['/Excel/graph1.png','/Excel/graph2.png','/Excel/graph3.png'],
        tag:['Python','GUI','Excel','macro','1인 개발'],
        ex:[{title:'PyQt 기반 GUI 프로그램',contant:'직관적이고 사용하기 쉬운 PyQt 기반의 GUI를 구현하여 사용자가 대용량 엑셀 데이터를 효율적으로 편집할 수 있도록 설계.'},
            {title:'대용량 데이터 편집',contant:'데이터 간 간격, 차트 편집 ,필터링 및 데이터 추출 기능등이있으며 대용량 데이터도 빠르고 효율적으로 처리 할 수 있습니다.'},
            {title:'사용자 정의 기능 추가',contant:'Excel을 통해 조합 방식과 관련된 데이터를 체계적으로 관리하여 조합의 논리성과 균형을 유지하고 필요에 따라 쉽게 수정 가능.'},
            {title:'사용자 피드백 및 요청 시스템',contant:'사용자가 필요에 따라 기능을 추가할 수 있는 확장성을 제공하여 다양한 요구사항에 유연하게 대응 가능.'},
        ],
        contant:`
        액셀을 잘 다루지 못하는 사람을 위해 간단한 조작으로 액셀을 관리할 수 있게 하는 프로그램입니다.
        `,
        main:[
            {
                'chapter':'프로젝트 개요',
                'contant':[`
           이 프로젝트는 Python과 PyQt를 사용하여 대용량 엑셀 데이터를 손쉽게 편집할 수 있는 GUI 매크로 프로그램을 개발한 것입니다. 이 프로그램은 데이터 간의 간격 띄우기, 차트 편집, 함수 실행, 필요한 데이터 필터링 및 적용 등 여러 기능을 제공하여 사용자가 효율적으로 데이터를 관리하고 편집할 수 있도록 도와줍니다.
            `
                ]
            },
            {
                'chapter':'PyQt 기반 GUI',
                'contant':['직관적이고 사용하기 쉬운 PyQt 기반의 GUI를 구현하여 사용자가 대용량 엑셀 데이터를 편리하게 편집할 수 있도록 설계했습니다.',
                ]
            },
            {
                'chapter':'대용량 엑셀 데이터 편집',
                'contant':['데이터 간 간격 띄우기: 데이터 사이의 간격을 조정할 수 있는 기능을 제공하여 대량의 데이터도 쉽게 정렬하고 관리할 수 있습니다.',
                    '차트 편집: 엑셀 데이터에서 차트를 생성하고 편집할 수 있는 기능을 제공하여 데이터 시각화를 용이하게 합니다.',
                    '필터링 및 데이터 추출: 특정 조건에 맞는 데이터를 필터링하고 필요한 셀에 적용하여 효율적으로 데이터를 추출할 수 있습니다.'
                ]
            },
            {
                'chapter':'자동화 및 효율성',
                'contant':['자동화: 반복적이고 시간이 많이 소요되는 작업을 자동화하여 사용자가 시간을 절약하고 효율성을 높일 수 있습니다.',
                    '대량 데이터 처리: 대용량 데이터도 빠르고 효율적으로 처리할 수 있도록 최적화되었습니다.'
                    
                ]
            },
            {
                'chapter':'사용자 정의 기능 추가',
                'contant':['조합 방식과 관련된 모든 데이터는 Excel을 사용하여 체계적으로 관리됩니다. 이를 통해 조합의 논리성과 균형을 유지하고, 필요시 쉽게 수정할 수 있습니다.'
                ]
            },
            {
                'chapter':'사용자 피드백 및 요청 시스템',
                'contant':['확장성: 사용자가 필요에 따라 기능을 추가할 수 있는 확장성을 제공하여 다양한 요구사항에 대응할 수 있습니다.',
                ]
            }
        ],
        skills:{'언어':'Python','GUI 라이브러리': 'PyQt','엑셀 처리 라이브러리': 'pandas, openpyxl, xlrd 등'},
        result:`
   이 대용량 엑셀 데이터 편집 매크로 프로그램은 대규모 데이터 작업을 간소화하고 시간을 절약하는 데 크게 기여했습니다. 
   사용자들은 반복적이고 시간이 많이 걸리는 작업을 자동화함으로써 생산성을 높일 수 있었습니다. 
   또한, 직관적인 PyQt 기반의 GUI를 통해 데이터 편집 작업을 쉽게 수행할 수 있었으며, 
   다양한 편집 기능을 통해 데이터 관리가 용이해졌습니다.
    프로젝트 진행 중  사용자 피드백을 빠르게 반영하여 기능을 추가 및 수정했습니다.
        `
    },
    
]